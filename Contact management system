import json
import os
import tkinter as tk
from tkinter import messagebox, simpledialog

# Define the path to the contacts file
contacts_file = 'contacts.json'

# Load contacts from the file
def load_contacts():
    if os.path.exists(contacts_file):
        with open(contacts_file, 'r') as file:
            return json.load(file)
    return []

# Save contacts to the file
def save_contacts(contacts):
    with open(contacts_file, 'w') as file:
        json.dump(contacts, file, indent=4)

# Add a new contact
def add_contact():
    name = simpledialog.askstring("Input", "Enter name:")
    if not name:
        return
    phone = simpledialog.askstring("Input", "Enter phone number:")
    email = simpledialog.askstring("Input", "Enter email address:")
    contacts.append({'name': name, 'phone': phone, 'email': email})
    save_contacts(contacts)
    refresh_contacts()
    messagebox.showinfo("Success", "Contact added.")

# View all contacts
def view_contacts():
    contact_list.delete(0, tk.END)
    for i, contact in enumerate(contacts, start=1):
        contact_list.insert(tk.END, f"{i}. {contact['name']} - {contact['phone']} - {contact['email']}")

# Edit an existing contact
def edit_contact():
    selection = contact_list.curselection()
    if not selection:
        messagebox.showwarning("Warning", "Please select a contact to edit.")
        return
    index = selection[0]
    contact = contacts[index]
    name = simpledialog.askstring("Input", "Enter new name (leave blank to keep current):", initialvalue=contact['name'])
    phone = simpledialog.askstring("Input", "Enter new phone number (leave blank to keep current):", initialvalue=contact['phone'])
    email = simpledialog.askstring("Input", "Enter new email address (leave blank to keep current):", initialvalue=contact['email'])
    if name:
        contact['name'] = name
    if phone:
        contact['phone'] = phone
    if email:
        contact['email'] = email
    save_contacts(contacts)
    refresh_contacts()
    messagebox.showinfo("Success", "Contact updated.")

# Delete a contact
def delete_contact():
    selection = contact_list.curselection()
    if not selection:
        messagebox.showwarning("Warning", "Please select a contact to delete.")
        return
    index = selection[0]
    contacts.pop(index)
    save_contacts(contacts)
    refresh_contacts()
    messagebox.showinfo("Success", "Contact deleted.")

# Refresh the contacts list
def refresh_contacts():
    view_contacts()

# Main GUI setup
app = tk.Tk()
app.title("Contact Manager")

frame = tk.Frame(app)
frame.pack(pady=20)

contact_list = tk.Listbox(frame, width=50, height=10)
contact_list.pack(side=tk.LEFT, padx=10)

scrollbar = tk.Scrollbar(frame, orient=tk.VERTICAL, command=contact_list.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

contact_list.config(yscrollcommand=scrollbar.set)

button_frame = tk.Frame(app)
button_frame.pack(pady=10)

add_button = tk.Button(button_frame, text="Add Contact", command=add_contact)
add_button.grid(row=0, column=0, padx=5)

edit_button = tk.Button(button_frame, text="Edit Contact", command=edit_contact)
edit_button.grid(row=0, column=1, padx=5)

delete_button = tk.Button(button_frame, text="Delete Contact", command=delete_contact)
delete_button.grid(row=0, column=2, padx=5)

exit_button = tk.Button(button_frame, text="Exit", command=app.quit)
exit_button.grid(row=0, column=3, padx=5)

# Load contacts and populate the list
contacts = load_contacts()
refresh_contacts()

app.mainloop()
